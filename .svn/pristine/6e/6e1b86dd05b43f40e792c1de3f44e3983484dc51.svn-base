package com.info.dao;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;

public abstract class AbstractDao<PK extends Serializable, T> {

	private final Class<T> persistentClass;

	@SuppressWarnings("unchecked")
	public AbstractDao() {
		this.persistentClass = (Class<T>) ((ParameterizedType) this.getClass().getGenericSuperclass())
				.getActualTypeArguments()[1];
	}

	@Autowired
	private SessionFactory sessionFactory;

	protected Session getSession() {
		return sessionFactory.getCurrentSession();
	}

	@SuppressWarnings("unchecked")
	public T getByKey(PK key) {
		return (T) getSession().get(persistentClass, key);
	}

	public void persist(T entity) {
		getSession().persist(entity);
	}

	public void delete(T entity) {
		getSession().delete(entity);
	}

	public void deleteById(PK id) {
		T entity = getByKey(id);
		if (entity != null)
			getSession().delete(entity);
	}

	protected Criteria createEntityCriteria() {
		return getSession().createCriteria(persistentClass);
	}

	public void update(T entity) {
		getSession().saveOrUpdate(entity);
	}

	public List<T> getListByQuery(String hql, Object... params) {
		try {
			@SuppressWarnings("unchecked")
			TypedQuery<T> query = getSession().createQuery(hql);
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					query.setParameter(i, params[i]);
				}
			}
			return query.getResultList();
		} catch (NoResultException e) {
			// do nothing
		}
		return null;
	}

	public T getSingleResultByQuery(String hql, Object... params) {
		try {
			@SuppressWarnings("unchecked")
			TypedQuery<T> query = getSession().createQuery(hql);
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					query.setParameter(i, params[i]);
				}
			}
			return query.getSingleResult();
		} catch (NoResultException e) {
			// do nothing
		}
		return null;
	}

}
